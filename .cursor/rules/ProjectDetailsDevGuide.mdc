---
description: 
globs: 
alwaysApply: true
---
This is helpful for alligning and staying focused on the intial build of the core product requirements. Intended to keep agents grounded and streamlined.

# Tournament Building App - Development Guide

## Project Overview
Build a mobile app for managing camping group tournaments with team-based competitions.

## Core Requirements

### 1. Data Models

**Player**
- name (string, required)
- nickname (string, optional)
- gender (enum: male/female/other)
- wins (integer, default 0)
- losses (integer, default 0)

**Team**
- player1 (Player reference)
- player2 (Player reference)
- teamName (string, auto-generated or custom)

**Tournament**
- name (string)
- teams (array of Teams)
- bracket (nested structure for matches)
- status (enum: setup/active/completed)

**Match**
- team1 (Team reference)
- team2 (Team reference, nullable for bye)
- score1 (integer)
- score2 (integer)
- round (integer)
- isComplete (boolean)

### 2. Key Features

**Player Management**
- Create/edit player profiles
- Track individual win/loss records across all tournaments

**Team Creation**
- Manual team selection
- Boy/Girl mode: automatically pair one male + one female player
- Prevent duplicate player assignments

**Tournament Setup**
- Create tournament with selected players
- Generate teams (manual or boy/girl mode)
- Create single-elimination bracket
- Handle odd number of teams with automatic bye assignment

**Bracket Generation**
- Random seeding for first round
- Point differential seeding for subsequent rounds (optional)
- Visual bracket display
- Automatic advancement when match completes

**Score Tracking**
- Update match scores in real-time
- Quick score buttons (+1, +2, +3)
- Manual score entry option
- Mark match as complete
- Auto-advance winner to next round

**Pre-Made Groups**
- Save frequently used player groups
- Quick-load saved groups for new tournaments

### 3. Technical Specifications

**Platform**: iOS and Android mobile app
**Data Storage**: Local SQLite database
**UI Framework**: React Native or Flutter (cross-platform)
**State Management**: Built-in framework solutions

### 4. User Flow

1. **First Use**: Create player profiles
2. **Tournament Creation**:
   - Name tournament
   - Select players (or load pre-made group)
   - Choose team creation method
   - Generate bracket
3. **Tournament Play**:
   - View bracket
   - Select match to score
   - Update scores
   - Complete match
   - Repeat until champion
4. **Post-Tournament**: View results and updated player records

### 5. MVP Scope

**Must Have**:
- Player profiles with gender
- Boy/girl team creation mode
- Single elimination brackets
- Bye handling for odd teams
- Score tracking
- Win/loss records

**Nice to Have** (Post-MVP):
- Point differential seeding
- Tournament history
- Export results
- Multiple bracket types

### 6. UI/UX Guidelines

- Large touch targets for outdoor use
- High contrast colors for sunlight visibility
- Simple navigation (max 3 taps to any feature)
- Clear visual bracket representation
- Prominent score entry buttons

### 7. Implementation Notes

- Start with hardcoded single elimination logic
- Use simple random number generation for seeding
- Store all data locally (no backend needed for MVP)
- Focus on core tournament flow before adding advanced features

